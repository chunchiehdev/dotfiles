---
- name: Install Docker (Standard Linux)
  block:
    - name: Check if Ubuntu version is supported
      fail:
        msg: "Docker Engine only supports Ubuntu Oracular 24.10, Noble 24.04 LTS, Jammy 22.04 LTS, or Focal 20.04 LTS"
      when: 
        - ansible_os_family == "Debian"
        - ansible_distribution == "Ubuntu"
        - ansible_distribution_release not in ["oracular", "noble", "jammy", "focal"]

    - name: Warn if not pure Ubuntu
      debug:
        msg: "Warning: Docker Engine is not officially supported on Ubuntu derivative distributions (e.g., Linux Mint)"
      when: 
        - ansible_os_family == "Debian"
        - ansible_distribution != "Ubuntu"

    - name: Uninstall conflicting Docker packages
      apt:
        name:
          - docker.io
          - docker-compose
          - docker-compose-v2
          - docker-doc
          - podman-docker
          - containerd
          - runc
        state: absent
        purge: yes
      become: true

    - name: Check if iptables is installed
      command: dpkg -l iptables
      register: iptables_installed
      failed_when: false
      changed_when: false
      become: true

    - name: Install iptables if not present
      apt:
        name: iptables
        state: present
      when: iptables_installed.rc != 0
      become: true

    - name: Check if iptables alternatives exist
      shell: update-alternatives --display iptables 2>/dev/null || echo "not exists"
      register: iptables_alternatives
      failed_when: false
      changed_when: false
      become: true

    - name: Ensure iptables is used instead of nftables
      shell: update-alternatives --set iptables /usr/sbin/iptables-legacy
      when: "'not exists' not in iptables_alternatives.stdout"
      become: true
      
    - name: Install prerequisites for Docker repository
      apt:
        name:
          - ca-certificates
          - curl
        state: present
      become: true

    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      become: true

    - name: Add Docker GPG key
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc && chmod a+r /etc/apt/keyrings/docker.asc
      args:
        creates: /etc/apt/keyrings/docker.asc
      become: true

    - name: Get Ubuntu codename
      shell: . /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}"
      register: ubuntu_codename
      changed_when: false
      become: true

    - name: Get system architecture
      shell: dpkg --print-architecture
      register: dpkg_architecture
      changed_when: false
      become: true

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch={{ dpkg_architecture.stdout }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ubuntu_codename.stdout }} stable"
        state: present
        filename: docker
      become: true

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        update_cache: yes
      become: true

    - name: Add user to docker group
      user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: yes
      become: true

    - name: Create docker service startup file for WSL
      copy:
        dest: /etc/init.d/docker-wsl-startup
        content: |
          #!/bin/sh
          # Start Docker daemon automatically when WSL starts
          service docker start
        mode: '0755'
      become: true
      when: is_wsl

    - name: Add Docker service to sudoers for non-password startup
      lineinfile:
        path: /etc/sudoers.d/docker-service
        line: "{{ ansible_user_id }} ALL=(ALL) NOPASSWD: /usr/sbin/service docker start"
        create: yes
        mode: 0440
        validate: 'visudo -cf %s'
      become: true
      when: is_wsl

    - name: Add Docker startup to shell profiles
      blockinfile:
        path: "{{ item }}"
        create: "{{ item == home_dir + '/.bashrc' }}"
        marker: "# {mark} DOCKER SERVICE AUTOSTART FOR WSL"
        block: |
          # Start Docker service if not running
          if [ -x "$(command -v docker)" ] && ! docker info > /dev/null 2>&1; then
              echo "Starting Docker service..."
              sudo service docker start > /dev/null 2>&1
          fi
      loop:
        - "{{ home_dir }}/.bashrc"
        - "{{ home_dir }}/.zshrc"
      ignore_errors: yes
      when: is_wsl
  when: ansible_os_family == "Debian"

- name: Install Docker Desktop (macOS)
  homebrew_cask:
    name: docker
    state: present
  when: ansible_os_family == "Darwin"
  become: false